'use strict';

const gulp = require('gulp'),
      gulpConcat = require('gulp-concat'),
      gulpInsert = require('gulp-insert'),
      gulpSass = require('gulp-sass');

const spawn = require('child_process').spawn;

const config = {
  jsPaths: [
    './node_modules/jquery/dist/jquery.min.js',
    './node_modules/jquery.scrollex/jquery.scrollex.min.js',
    './assets/js/vendor/jquery.scrolly.min.js',
    './node_modules/skel-framework/dist/skel.min.js',

    './assets/js/util.js',
    './assets/js/main.js',
  ]
}

const warningBanner = `/*******************************************************************************
* CAUTION!  DO NOT EDIT THIS FILE!                                             *
*                                                                              *
* This file was generated automatically, and any changes made to it will be    *
* overwritten.  Please do not edit it directly.                                *
*******************************************************************************/

`;

function buildScripts() {
  return gulp.src(config.jsPaths)
    .pipe(gulpConcat('main.js'))
    .pipe(gulpInsert.prepend(warningBanner))
    .pipe(gulp.dest('./assets/'));

}

function watchScripts() {
  gulp.watch('./assets/js/**/*', buildScripts);
}

function buildStyles() {
  const sassOptions = {
    includePaths: [],
    outputStyle: 'expanded',
  };

  return gulp.src('./assets/css/main.{sass,scss}')
    // .pipe(gulpSourcemaps.init())
    .pipe(gulpSass(sassOptions).on('error', gulpSass.logError))
    .pipe(gulpInsert.prepend(warningBanner))
    // .pipe(gulpSourcemaps.write('./'))
    .pipe(gulp.dest('./assets'))
}

function watchStyles() {
  gulp.watch('./assets/css/**/*', buildStyles);
}

function runServer() {
  return spawn('node', ['../../../index.js'], {stdio: 'inherit'});
}

const buildAssets = gulp.parallel(buildScripts, buildStyles);

const watchAssets = gulp.parallel(watchScripts, watchStyles);

gulp.task('build', buildAssets);

gulp.task('serve', gulp.series(
  buildAssets,
  gulp.parallel(
    watchAssets,
    runServer
  )
));
